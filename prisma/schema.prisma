// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id           String        @id @default(uuid()) @db.Uuid
    //
    title        String        @db.VarChar(255)
    edition      String?       @db.VarChar(50)
    author       String        @db.VarChar(255) // TODO: support multiple authors
    genre        String        @db.VarChar(50)
    status       BookStatus    @default(OnShelf)
    //
    createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(0)
    updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(0)
    //
    userId       String?       @db.Uuid
    checkedOutBy User?         @relation(fields: [userId], references: [id], map: "checked_out_by")
    //
    Transaction  Transaction[]

    @@unique(fields: [title, edition, author], name: "unique_book_constraint")
    @@map("books")
}

enum BookStatus {
    CheckedOut
    OnShelf
}

model User {
    id          String        @id @default(uuid()) @db.Uuid
    //
    email       String        @unique @db.VarChar(255)
    fullName    String        @map("full_name") @db.VarChar(255)
    //
    createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(0)
    updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamptz(0)
    //
    books       Book[]
    Transaction Transaction[]

    @@map("users")
}

model Transaction {
    id        String            @id @default(uuid()) @db.Uuid
    //
    action    TransactionAction
    timestamp DateTime          @default(now()) @db.Timestamptz(0)
    //
    userId    String            @db.Uuid
    user      User              @relation(fields: [userId], references: [id], map: "transaction_user")
    //
    bookId    String            @db.Uuid
    book      Book              @relation(fields: [bookId], references: [id], map: "transaction_book")

    @@index([timestamp], map: "transaction_timestamp")
    @@map("transactions")
}

enum TransactionAction {
    CheckedOut
    Returned
}
